//// File Name: RcppExports.cpp
//// File Version: 3.008009
// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <string>
#include <set>

using namespace Rcpp; using namespace arma;

// miceadds_rcpp_create_interactions
Rcpp::List miceadds_rcpp_create_interactions(Rcpp::NumericVector Yr, Rcpp::NumericMatrix Xr, Rcpp::NumericMatrix Xallr, Rcpp::NumericMatrix index_int, Rcpp::NumericVector MI, Rcpp::NumericVector maxcols, bool use_weights, Rcpp::NumericVector weights_obs);
RcppExport SEXP _miceadds_miceadds_rcpp_create_interactions(SEXP YrSEXP, SEXP XrSEXP, SEXP XallrSEXP, SEXP index_intSEXP, SEXP MISEXP, SEXP maxcolsSEXP, SEXP use_weightsSEXP, SEXP weights_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Yr(YrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Xallr(XallrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type index_int(index_intSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type MI(MISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type maxcols(maxcolsSEXP);
    Rcpp::traits::input_parameter< bool >::type use_weights(use_weightsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights_obs(weights_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_create_interactions(Yr, Xr, Xallr, index_int, MI, maxcols, use_weights, weights_obs));
    return rcpp_result_gen;
END_RCPP
}
// kernelplsaux
Rcpp::List kernelplsaux(Rcpp::NumericMatrix Yr, Rcpp::NumericMatrix Xr, Rcpp::NumericVector nc);
RcppExport SEXP _miceadds_kernelplsaux(SEXP YrSEXP, SEXP XrSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Yr(YrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type nc(ncSEXP);
    rcpp_result_gen = Rcpp::wrap(kernelplsaux(Yr, Xr, nc));
    return rcpp_result_gen;
END_RCPP
}
// kernelpls_1dim_C
Rcpp::List kernelpls_1dim_C(Rcpp::NumericMatrix Yr, Rcpp::NumericMatrix Xr, Rcpp::NumericVector nc);
RcppExport SEXP _miceadds_kernelpls_1dim_C(SEXP YrSEXP, SEXP XrSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Yr(YrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type nc(ncSEXP);
    rcpp_result_gen = Rcpp::wrap(kernelpls_1dim_C(Yr, Xr, nc));
    return rcpp_result_gen;
END_RCPP
}
// miceadds_rcpp_ml_mcmc_sampler
Rcpp::List miceadds_rcpp_ml_mcmc_sampler(arma::colvec y_obs, arma::mat X, arma::mat xtx_inv, Rcpp::List ztz_list, Rcpp::List Z_list, arma::colvec beta_init, Rcpp::List Psi_list_init, double sigma2_init, arma::colvec alpha_init, Rcpp::List u_list_init, Rcpp::List idcluster_list, Rcpp::List onlyintercept_list, Rcpp::List ncluster_list, int sigma2_nu0, double sigma2_sigma2_0, Rcpp::List psi_nu0_list, Rcpp::List psi_S0_list, int NR, bool est_sigma2, bool est_probit, Rcpp::List parameter_index, Rcpp::List est_parameter, int npar, int iter, Rcpp::IntegerVector save_iter, bool verbose, int print_iter, bool est_thresh, int K, Rcpp::NumericVector sd_proposal, double ridge);
static SEXP _miceadds_miceadds_rcpp_ml_mcmc_sampler_try(SEXP y_obsSEXP, SEXP XSEXP, SEXP xtx_invSEXP, SEXP ztz_listSEXP, SEXP Z_listSEXP, SEXP beta_initSEXP, SEXP Psi_list_initSEXP, SEXP sigma2_initSEXP, SEXP alpha_initSEXP, SEXP u_list_initSEXP, SEXP idcluster_listSEXP, SEXP onlyintercept_listSEXP, SEXP ncluster_listSEXP, SEXP sigma2_nu0SEXP, SEXP sigma2_sigma2_0SEXP, SEXP psi_nu0_listSEXP, SEXP psi_S0_listSEXP, SEXP NRSEXP, SEXP est_sigma2SEXP, SEXP est_probitSEXP, SEXP parameter_indexSEXP, SEXP est_parameterSEXP, SEXP nparSEXP, SEXP iterSEXP, SEXP save_iterSEXP, SEXP verboseSEXP, SEXP print_iterSEXP, SEXP est_threshSEXP, SEXP KSEXP, SEXP sd_proposalSEXP, SEXP ridgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type y_obs(y_obsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xtx_inv(xtx_invSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ztz_list(ztz_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type beta_init(beta_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Psi_list_init(Psi_list_initSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_init(sigma2_initSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type alpha_init(alpha_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type u_list_init(u_list_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type idcluster_list(idcluster_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type onlyintercept_list(onlyintercept_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ncluster_list(ncluster_listSEXP);
    Rcpp::traits::input_parameter< int >::type sigma2_nu0(sigma2_nu0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_sigma2_0(sigma2_sigma2_0SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type psi_nu0_list(psi_nu0_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type psi_S0_list(psi_S0_listSEXP);
    Rcpp::traits::input_parameter< int >::type NR(NRSEXP);
    Rcpp::traits::input_parameter< bool >::type est_sigma2(est_sigma2SEXP);
    Rcpp::traits::input_parameter< bool >::type est_probit(est_probitSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type parameter_index(parameter_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type est_parameter(est_parameterSEXP);
    Rcpp::traits::input_parameter< int >::type npar(nparSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type save_iter(save_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type print_iter(print_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type est_thresh(est_threshSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sd_proposal(sd_proposalSEXP);
    Rcpp::traits::input_parameter< double >::type ridge(ridgeSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_ml_mcmc_sampler(y_obs, X, xtx_inv, ztz_list, Z_list, beta_init, Psi_list_init, sigma2_init, alpha_init, u_list_init, idcluster_list, onlyintercept_list, ncluster_list, sigma2_nu0, sigma2_sigma2_0, psi_nu0_list, psi_S0_list, NR, est_sigma2, est_probit, parameter_index, est_parameter, npar, iter, save_iter, verbose, print_iter, est_thresh, K, sd_proposal, ridge));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_ml_mcmc_sampler(SEXP y_obsSEXP, SEXP XSEXP, SEXP xtx_invSEXP, SEXP ztz_listSEXP, SEXP Z_listSEXP, SEXP beta_initSEXP, SEXP Psi_list_initSEXP, SEXP sigma2_initSEXP, SEXP alpha_initSEXP, SEXP u_list_initSEXP, SEXP idcluster_listSEXP, SEXP onlyintercept_listSEXP, SEXP ncluster_listSEXP, SEXP sigma2_nu0SEXP, SEXP sigma2_sigma2_0SEXP, SEXP psi_nu0_listSEXP, SEXP psi_S0_listSEXP, SEXP NRSEXP, SEXP est_sigma2SEXP, SEXP est_probitSEXP, SEXP parameter_indexSEXP, SEXP est_parameterSEXP, SEXP nparSEXP, SEXP iterSEXP, SEXP save_iterSEXP, SEXP verboseSEXP, SEXP print_iterSEXP, SEXP est_threshSEXP, SEXP KSEXP, SEXP sd_proposalSEXP, SEXP ridgeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_ml_mcmc_sampler_try(y_obsSEXP, XSEXP, xtx_invSEXP, ztz_listSEXP, Z_listSEXP, beta_initSEXP, Psi_list_initSEXP, sigma2_initSEXP, alpha_initSEXP, u_list_initSEXP, idcluster_listSEXP, onlyintercept_listSEXP, ncluster_listSEXP, sigma2_nu0SEXP, sigma2_sigma2_0SEXP, psi_nu0_listSEXP, psi_S0_listSEXP, NRSEXP, est_sigma2SEXP, est_probitSEXP, parameter_indexSEXP, est_parameterSEXP, nparSEXP, iterSEXP, save_iterSEXP, verboseSEXP, print_iterSEXP, est_threshSEXP, KSEXP, sd_proposalSEXP, ridgeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_arma_chol_ridge
arma::mat miceadds_rcpp_arma_chol_ridge(arma::mat sigma0, double ridge);
static SEXP _miceadds_miceadds_rcpp_arma_chol_ridge_try(SEXP sigma0SEXP, SEXP ridgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type sigma0(sigma0SEXP);
    Rcpp::traits::input_parameter< double >::type ridge(ridgeSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_arma_chol_ridge(sigma0, ridge));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_arma_chol_ridge(SEXP sigma0SEXP, SEXP ridgeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_arma_chol_ridge_try(sigma0SEXP, ridgeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_mvrnorm
arma::colvec miceadds_rcpp_mvrnorm(arma::colvec mu, arma::mat sigma, double ridge);
static SEXP _miceadds_miceadds_rcpp_mvrnorm_try(SEXP muSEXP, SEXP sigmaSEXP, SEXP ridgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type ridge(ridgeSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_mvrnorm(mu, sigma, ridge));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_mvrnorm(SEXP muSEXP, SEXP sigmaSEXP, SEXP ridgeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_mvrnorm_try(muSEXP, sigmaSEXP, ridgeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_rwishart
arma::mat miceadds_rcpp_rwishart(int df, arma::mat S, double ridge);
static SEXP _miceadds_miceadds_rcpp_rwishart_try(SEXP dfSEXP, SEXP SSEXP, SEXP ridgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type df(dfSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type ridge(ridgeSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_rwishart(df, S, ridge));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_rwishart(SEXP dfSEXP, SEXP SSEXP, SEXP ridgeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_rwishart_try(dfSEXP, SSEXP, ridgeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_riwishart
arma::mat miceadds_rcpp_riwishart(int df, arma::mat S, double ridge);
static SEXP _miceadds_miceadds_rcpp_riwishart_try(SEXP dfSEXP, SEXP SSEXP, SEXP ridgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type df(dfSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type ridge(ridgeSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_riwishart(df, S, ridge));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_riwishart(SEXP dfSEXP, SEXP SSEXP, SEXP ridgeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_riwishart_try(dfSEXP, SSEXP, ridgeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_rtnorm_double
double miceadds_rcpp_rtnorm_double(double mu, double sigma, double lower, double upper);
static SEXP _miceadds_miceadds_rcpp_rtnorm_double_try(SEXP muSEXP, SEXP sigmaSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_rtnorm_double(mu, sigma, lower, upper));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_rtnorm_double(SEXP muSEXP, SEXP sigmaSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_rtnorm_double_try(muSEXP, sigmaSEXP, lowerSEXP, upperSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_rtnorm
arma::colvec miceadds_rcpp_rtnorm(arma::colvec mu, arma::colvec sigma, arma::colvec lower, arma::colvec upper);
static SEXP _miceadds_miceadds_rcpp_rtnorm_try(SEXP muSEXP, SEXP sigmaSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_rtnorm(mu, sigma, lower, upper));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_rtnorm(SEXP muSEXP, SEXP sigmaSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_rtnorm_try(muSEXP, sigmaSEXP, lowerSEXP, upperSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_arma2vec
Rcpp::NumericVector miceadds_rcpp_arma2vec(arma::colvec x);
static SEXP _miceadds_miceadds_rcpp_arma2vec_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_arma2vec(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_arma2vec(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_arma2vec_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_pnorm
Rcpp::NumericVector miceadds_rcpp_pnorm(Rcpp::NumericVector x, Rcpp::NumericVector mu, double sigma);
static SEXP _miceadds_miceadds_rcpp_pnorm_try(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_pnorm(x, mu, sigma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_pnorm(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_pnorm_try(xSEXP, muSEXP, sigmaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_qnorm
Rcpp::NumericVector miceadds_rcpp_qnorm(Rcpp::NumericVector x, Rcpp::NumericVector mu, double sigma);
static SEXP _miceadds_miceadds_rcpp_qnorm_try(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_qnorm(x, mu, sigma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_qnorm(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_qnorm_try(xSEXP, muSEXP, sigmaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_rtnorm2
arma::colvec miceadds_rcpp_rtnorm2(arma::colvec mu, double sigma0, arma::colvec lower, arma::colvec upper, double minval, double maxval);
static SEXP _miceadds_miceadds_rcpp_rtnorm2_try(SEXP muSEXP, SEXP sigma0SEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP minvalSEXP, SEXP maxvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma0(sigma0SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type minval(minvalSEXP);
    Rcpp::traits::input_parameter< double >::type maxval(maxvalSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_rtnorm2(mu, sigma0, lower, upper, minval, maxval));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_rtnorm2(SEXP muSEXP, SEXP sigma0SEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP minvalSEXP, SEXP maxvalSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_rtnorm2_try(muSEXP, sigma0SEXP, lowerSEXP, upperSEXP, minvalSEXP, maxvalSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_ml_mcmc_compute_xtx
arma::mat miceadds_rcpp_ml_mcmc_compute_xtx(arma::mat X);
static SEXP _miceadds_miceadds_rcpp_ml_mcmc_compute_xtx_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_ml_mcmc_compute_xtx(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_ml_mcmc_compute_xtx(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_ml_mcmc_compute_xtx_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_ml_mcmc_compute_ztz
arma::mat miceadds_rcpp_ml_mcmc_compute_ztz(arma::mat Z, Rcpp::IntegerVector idcluster, int ncluster);
static SEXP _miceadds_miceadds_rcpp_ml_mcmc_compute_ztz_try(SEXP ZSEXP, SEXP idclusterSEXP, SEXP nclusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type idcluster(idclusterSEXP);
    Rcpp::traits::input_parameter< int >::type ncluster(nclusterSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_ml_mcmc_compute_ztz(Z, idcluster, ncluster));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_ml_mcmc_compute_ztz(SEXP ZSEXP, SEXP idclusterSEXP, SEXP nclusterSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_ml_mcmc_compute_ztz_try(ZSEXP, idclusterSEXP, nclusterSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_ml_mcmc_predict_fixed
arma::colvec miceadds_rcpp_ml_mcmc_predict_fixed(arma::mat X, arma::colvec beta);
static SEXP _miceadds_miceadds_rcpp_ml_mcmc_predict_fixed_try(SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_ml_mcmc_predict_fixed(X, beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_ml_mcmc_predict_fixed(SEXP XSEXP, SEXP betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_ml_mcmc_predict_fixed_try(XSEXP, betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_ml_mcmc_subtract_fixed
arma::colvec miceadds_rcpp_ml_mcmc_subtract_fixed(arma::colvec y, arma::mat X, arma::colvec beta);
static SEXP _miceadds_miceadds_rcpp_ml_mcmc_subtract_fixed_try(SEXP ySEXP, SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_ml_mcmc_subtract_fixed(y, X, beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_ml_mcmc_subtract_fixed(SEXP ySEXP, SEXP XSEXP, SEXP betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_ml_mcmc_subtract_fixed_try(ySEXP, XSEXP, betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_ml_mcmc_predict_random
arma::colvec miceadds_rcpp_ml_mcmc_predict_random(arma::mat Z, arma::mat u, Rcpp::IntegerVector idcluster);
static SEXP _miceadds_miceadds_rcpp_ml_mcmc_predict_random_try(SEXP ZSEXP, SEXP uSEXP, SEXP idclusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type idcluster(idclusterSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_ml_mcmc_predict_random(Z, u, idcluster));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_ml_mcmc_predict_random(SEXP ZSEXP, SEXP uSEXP, SEXP idclusterSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_ml_mcmc_predict_random_try(ZSEXP, uSEXP, idclusterSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_ml_mcmc_predict_random_list
arma::colvec miceadds_rcpp_ml_mcmc_predict_random_list(Rcpp::List Z_list, Rcpp::List u_list, Rcpp::List idcluster_list, int NR, int N);
static SEXP _miceadds_miceadds_rcpp_ml_mcmc_predict_random_list_try(SEXP Z_listSEXP, SEXP u_listSEXP, SEXP idcluster_listSEXP, SEXP NRSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type u_list(u_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type idcluster_list(idcluster_listSEXP);
    Rcpp::traits::input_parameter< int >::type NR(NRSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_ml_mcmc_predict_random_list(Z_list, u_list, idcluster_list, NR, N));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_ml_mcmc_predict_random_list(SEXP Z_listSEXP, SEXP u_listSEXP, SEXP idcluster_listSEXP, SEXP NRSEXP, SEXP NSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_ml_mcmc_predict_random_list_try(Z_listSEXP, u_listSEXP, idcluster_listSEXP, NRSEXP, NSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_ml_mcmc_predict_fixed_random
arma::colvec miceadds_rcpp_ml_mcmc_predict_fixed_random(arma::mat X, arma::colvec beta, Rcpp::List Z_list, Rcpp::List u_list, Rcpp::List idcluster_list, int NR);
static SEXP _miceadds_miceadds_rcpp_ml_mcmc_predict_fixed_random_try(SEXP XSEXP, SEXP betaSEXP, SEXP Z_listSEXP, SEXP u_listSEXP, SEXP idcluster_listSEXP, SEXP NRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type u_list(u_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type idcluster_list(idcluster_listSEXP);
    Rcpp::traits::input_parameter< int >::type NR(NRSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_ml_mcmc_predict_fixed_random(X, beta, Z_list, u_list, idcluster_list, NR));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_ml_mcmc_predict_fixed_random(SEXP XSEXP, SEXP betaSEXP, SEXP Z_listSEXP, SEXP u_listSEXP, SEXP idcluster_listSEXP, SEXP NRSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_ml_mcmc_predict_fixed_random_try(XSEXP, betaSEXP, Z_listSEXP, u_listSEXP, idcluster_listSEXP, NRSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_ml_mcmc_subtract_random
arma::colvec miceadds_rcpp_ml_mcmc_subtract_random(arma::colvec y, arma::mat Z, arma::mat u, Rcpp::IntegerVector idcluster, bool onlyintercept);
static SEXP _miceadds_miceadds_rcpp_ml_mcmc_subtract_random_try(SEXP ySEXP, SEXP ZSEXP, SEXP uSEXP, SEXP idclusterSEXP, SEXP onlyinterceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type idcluster(idclusterSEXP);
    Rcpp::traits::input_parameter< bool >::type onlyintercept(onlyinterceptSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_ml_mcmc_subtract_random(y, Z, u, idcluster, onlyintercept));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_ml_mcmc_subtract_random(SEXP ySEXP, SEXP ZSEXP, SEXP uSEXP, SEXP idclusterSEXP, SEXP onlyinterceptSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_ml_mcmc_subtract_random_try(ySEXP, ZSEXP, uSEXP, idclusterSEXP, onlyinterceptSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_ml_mcmc_sample_beta
arma::colvec miceadds_rcpp_ml_mcmc_sample_beta(arma::mat xtx_inv, arma::mat X, Rcpp::List Z_list, arma::colvec y, Rcpp::List u_list, Rcpp::List idcluster_list, double sigma2, Rcpp::List onlyintercept_list, int NR, double ridge);
static SEXP _miceadds_miceadds_rcpp_ml_mcmc_sample_beta_try(SEXP xtx_invSEXP, SEXP XSEXP, SEXP Z_listSEXP, SEXP ySEXP, SEXP u_listSEXP, SEXP idcluster_listSEXP, SEXP sigma2SEXP, SEXP onlyintercept_listSEXP, SEXP NRSEXP, SEXP ridgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xtx_inv(xtx_invSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type u_list(u_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type idcluster_list(idcluster_listSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type onlyintercept_list(onlyintercept_listSEXP);
    Rcpp::traits::input_parameter< int >::type NR(NRSEXP);
    Rcpp::traits::input_parameter< double >::type ridge(ridgeSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_ml_mcmc_sample_beta(xtx_inv, X, Z_list, y, u_list, idcluster_list, sigma2, onlyintercept_list, NR, ridge));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_ml_mcmc_sample_beta(SEXP xtx_invSEXP, SEXP XSEXP, SEXP Z_listSEXP, SEXP ySEXP, SEXP u_listSEXP, SEXP idcluster_listSEXP, SEXP sigma2SEXP, SEXP onlyintercept_listSEXP, SEXP NRSEXP, SEXP ridgeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_ml_mcmc_sample_beta_try(xtx_invSEXP, XSEXP, Z_listSEXP, ySEXP, u_listSEXP, idcluster_listSEXP, sigma2SEXP, onlyintercept_listSEXP, NRSEXP, ridgeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_ml_mcmc_sample_u
Rcpp::List miceadds_rcpp_ml_mcmc_sample_u(arma::mat X, arma::colvec beta, Rcpp::List Z_list, arma::colvec y, Rcpp::List ztz_list, Rcpp::List idcluster_list, Rcpp::List ncluster_list, double sigma2, Rcpp::List Psi_list, Rcpp::List onlyintercept_list, int NR, Rcpp::List u0_list, double ridge);
static SEXP _miceadds_miceadds_rcpp_ml_mcmc_sample_u_try(SEXP XSEXP, SEXP betaSEXP, SEXP Z_listSEXP, SEXP ySEXP, SEXP ztz_listSEXP, SEXP idcluster_listSEXP, SEXP ncluster_listSEXP, SEXP sigma2SEXP, SEXP Psi_listSEXP, SEXP onlyintercept_listSEXP, SEXP NRSEXP, SEXP u0_listSEXP, SEXP ridgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ztz_list(ztz_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type idcluster_list(idcluster_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ncluster_list(ncluster_listSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Psi_list(Psi_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type onlyintercept_list(onlyintercept_listSEXP);
    Rcpp::traits::input_parameter< int >::type NR(NRSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type u0_list(u0_listSEXP);
    Rcpp::traits::input_parameter< double >::type ridge(ridgeSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_ml_mcmc_sample_u(X, beta, Z_list, y, ztz_list, idcluster_list, ncluster_list, sigma2, Psi_list, onlyintercept_list, NR, u0_list, ridge));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_ml_mcmc_sample_u(SEXP XSEXP, SEXP betaSEXP, SEXP Z_listSEXP, SEXP ySEXP, SEXP ztz_listSEXP, SEXP idcluster_listSEXP, SEXP ncluster_listSEXP, SEXP sigma2SEXP, SEXP Psi_listSEXP, SEXP onlyintercept_listSEXP, SEXP NRSEXP, SEXP u0_listSEXP, SEXP ridgeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_ml_mcmc_sample_u_try(XSEXP, betaSEXP, Z_listSEXP, ySEXP, ztz_listSEXP, idcluster_listSEXP, ncluster_listSEXP, sigma2SEXP, Psi_listSEXP, onlyintercept_listSEXP, NRSEXP, u0_listSEXP, ridgeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_crossprod_one_matrix
arma::mat miceadds_rcpp_crossprod_one_matrix(arma::mat X);
static SEXP _miceadds_miceadds_rcpp_crossprod_one_matrix_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_crossprod_one_matrix(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_crossprod_one_matrix(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_crossprod_one_matrix_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_ml_mcmc_sample_covariance_matrix
arma::mat miceadds_rcpp_ml_mcmc_sample_covariance_matrix(arma::mat u, int nu0, arma::mat S0, double ridge);
static SEXP _miceadds_miceadds_rcpp_ml_mcmc_sample_covariance_matrix_try(SEXP uSEXP, SEXP nu0SEXP, SEXP S0SEXP, SEXP ridgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< int >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< double >::type ridge(ridgeSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_ml_mcmc_sample_covariance_matrix(u, nu0, S0, ridge));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_ml_mcmc_sample_covariance_matrix(SEXP uSEXP, SEXP nu0SEXP, SEXP S0SEXP, SEXP ridgeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_ml_mcmc_sample_covariance_matrix_try(uSEXP, nu0SEXP, S0SEXP, ridgeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_print_arma_mat
void miceadds_rcpp_print_arma_mat(arma::mat x, int row1, int row2, int col1, int col2, int digits);
static SEXP _miceadds_miceadds_rcpp_print_arma_mat_try(SEXP xSEXP, SEXP row1SEXP, SEXP row2SEXP, SEXP col1SEXP, SEXP col2SEXP, SEXP digitsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type row1(row1SEXP);
    Rcpp::traits::input_parameter< int >::type row2(row2SEXP);
    Rcpp::traits::input_parameter< int >::type col1(col1SEXP);
    Rcpp::traits::input_parameter< int >::type col2(col2SEXP);
    Rcpp::traits::input_parameter< int >::type digits(digitsSEXP);
    miceadds_rcpp_print_arma_mat(x, row1, row2, col1, col2, digits);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_print_arma_mat(SEXP xSEXP, SEXP row1SEXP, SEXP row2SEXP, SEXP col1SEXP, SEXP col2SEXP, SEXP digitsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_print_arma_mat_try(xSEXP, row1SEXP, row2SEXP, col1SEXP, col2SEXP, digitsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_ml_mcmc_sample_psi
Rcpp::List miceadds_rcpp_ml_mcmc_sample_psi(Rcpp::List u_list, Rcpp::List nu0_list, Rcpp::List S0_list, int NR, double ridge);
static SEXP _miceadds_miceadds_rcpp_ml_mcmc_sample_psi_try(SEXP u_listSEXP, SEXP nu0_listSEXP, SEXP S0_listSEXP, SEXP NRSEXP, SEXP ridgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type u_list(u_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type nu0_list(nu0_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type S0_list(S0_listSEXP);
    Rcpp::traits::input_parameter< int >::type NR(NRSEXP);
    Rcpp::traits::input_parameter< double >::type ridge(ridgeSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_ml_mcmc_sample_psi(u_list, nu0_list, S0_list, NR, ridge));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_ml_mcmc_sample_psi(SEXP u_listSEXP, SEXP nu0_listSEXP, SEXP S0_listSEXP, SEXP NRSEXP, SEXP ridgeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_ml_mcmc_sample_psi_try(u_listSEXP, nu0_listSEXP, S0_listSEXP, NRSEXP, ridgeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_ml_mcmc_sample_variance
double miceadds_rcpp_ml_mcmc_sample_variance(arma::colvec e, int nu0, double sigma2_0, double ridge);
static SEXP _miceadds_miceadds_rcpp_ml_mcmc_sample_variance_try(SEXP eSEXP, SEXP nu0SEXP, SEXP sigma2_0SEXP, SEXP ridgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type e(eSEXP);
    Rcpp::traits::input_parameter< int >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_0(sigma2_0SEXP);
    Rcpp::traits::input_parameter< double >::type ridge(ridgeSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_ml_mcmc_sample_variance(e, nu0, sigma2_0, ridge));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_ml_mcmc_sample_variance(SEXP eSEXP, SEXP nu0SEXP, SEXP sigma2_0SEXP, SEXP ridgeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_ml_mcmc_sample_variance_try(eSEXP, nu0SEXP, sigma2_0SEXP, ridgeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_ml_mcmc_sample_sigma2
double miceadds_rcpp_ml_mcmc_sample_sigma2(arma::colvec y, arma::mat X, arma::colvec beta, Rcpp::List Z_list, Rcpp::List u_list, Rcpp::List idcluster_list, Rcpp::List onlyintercept_list, int nu0, double sigma2_0, int NR, double ridge);
static SEXP _miceadds_miceadds_rcpp_ml_mcmc_sample_sigma2_try(SEXP ySEXP, SEXP XSEXP, SEXP betaSEXP, SEXP Z_listSEXP, SEXP u_listSEXP, SEXP idcluster_listSEXP, SEXP onlyintercept_listSEXP, SEXP nu0SEXP, SEXP sigma2_0SEXP, SEXP NRSEXP, SEXP ridgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type u_list(u_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type idcluster_list(idcluster_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type onlyintercept_list(onlyintercept_listSEXP);
    Rcpp::traits::input_parameter< int >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_0(sigma2_0SEXP);
    Rcpp::traits::input_parameter< int >::type NR(NRSEXP);
    Rcpp::traits::input_parameter< double >::type ridge(ridgeSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_ml_mcmc_sample_sigma2(y, X, beta, Z_list, u_list, idcluster_list, onlyintercept_list, nu0, sigma2_0, NR, ridge));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_ml_mcmc_sample_sigma2(SEXP ySEXP, SEXP XSEXP, SEXP betaSEXP, SEXP Z_listSEXP, SEXP u_listSEXP, SEXP idcluster_listSEXP, SEXP onlyintercept_listSEXP, SEXP nu0SEXP, SEXP sigma2_0SEXP, SEXP NRSEXP, SEXP ridgeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_ml_mcmc_sample_sigma2_try(ySEXP, XSEXP, betaSEXP, Z_listSEXP, u_listSEXP, idcluster_listSEXP, onlyintercept_listSEXP, nu0SEXP, sigma2_0SEXP, NRSEXP, ridgeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_ml_mcmc_sample_latent_probit
arma::colvec miceadds_rcpp_ml_mcmc_sample_latent_probit(arma::mat X, arma::colvec beta, Rcpp::List Z_list, Rcpp::List u_list, Rcpp::List idcluster_list, int NR, Rcpp::IntegerVector y_int, arma::colvec alpha, double minval, double maxval);
static SEXP _miceadds_miceadds_rcpp_ml_mcmc_sample_latent_probit_try(SEXP XSEXP, SEXP betaSEXP, SEXP Z_listSEXP, SEXP u_listSEXP, SEXP idcluster_listSEXP, SEXP NRSEXP, SEXP y_intSEXP, SEXP alphaSEXP, SEXP minvalSEXP, SEXP maxvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type u_list(u_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type idcluster_list(idcluster_listSEXP);
    Rcpp::traits::input_parameter< int >::type NR(NRSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_int(y_intSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type minval(minvalSEXP);
    Rcpp::traits::input_parameter< double >::type maxval(maxvalSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_ml_mcmc_sample_latent_probit(X, beta, Z_list, u_list, idcluster_list, NR, y_int, alpha, minval, maxval));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_ml_mcmc_sample_latent_probit(SEXP XSEXP, SEXP betaSEXP, SEXP Z_listSEXP, SEXP u_listSEXP, SEXP idcluster_listSEXP, SEXP NRSEXP, SEXP y_intSEXP, SEXP alphaSEXP, SEXP minvalSEXP, SEXP maxvalSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_ml_mcmc_sample_latent_probit_try(XSEXP, betaSEXP, Z_listSEXP, u_listSEXP, idcluster_listSEXP, NRSEXP, y_intSEXP, alphaSEXP, minvalSEXP, maxvalSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_ml_mcmc_probit_fill_index_lower
Rcpp::NumericVector miceadds_rcpp_ml_mcmc_probit_fill_index_lower(Rcpp::IntegerVector y_int, arma::colvec alpha);
static SEXP _miceadds_miceadds_rcpp_ml_mcmc_probit_fill_index_lower_try(SEXP y_intSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_int(y_intSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_ml_mcmc_probit_fill_index_lower(y_int, alpha));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_ml_mcmc_probit_fill_index_lower(SEXP y_intSEXP, SEXP alphaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_ml_mcmc_probit_fill_index_lower_try(y_intSEXP, alphaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_ml_mcmc_probit_fill_index_upper
Rcpp::NumericVector miceadds_rcpp_ml_mcmc_probit_fill_index_upper(Rcpp::IntegerVector y_int, arma::colvec alpha);
static SEXP _miceadds_miceadds_rcpp_ml_mcmc_probit_fill_index_upper_try(SEXP y_intSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_int(y_intSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_ml_mcmc_probit_fill_index_upper(y_int, alpha));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_ml_mcmc_probit_fill_index_upper(SEXP y_intSEXP, SEXP alphaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_ml_mcmc_probit_fill_index_upper_try(y_intSEXP, alphaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_ml_mcmc_probit_category_prob
Rcpp::NumericVector miceadds_rcpp_ml_mcmc_probit_category_prob(Rcpp::IntegerVector y_int, arma::colvec alpha, Rcpp::NumericVector mu1, bool use_log);
static SEXP _miceadds_miceadds_rcpp_ml_mcmc_probit_category_prob_try(SEXP y_intSEXP, SEXP alphaSEXP, SEXP mu1SEXP, SEXP use_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_int(y_intSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< bool >::type use_log(use_logSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_ml_mcmc_probit_category_prob(y_int, alpha, mu1, use_log));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_ml_mcmc_probit_category_prob(SEXP y_intSEXP, SEXP alphaSEXP, SEXP mu1SEXP, SEXP use_logSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_ml_mcmc_probit_category_prob_try(y_intSEXP, alphaSEXP, mu1SEXP, use_logSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_ml_mcmc_probit_loglike
double miceadds_rcpp_ml_mcmc_probit_loglike(Rcpp::IntegerVector y_int, arma::colvec alpha, Rcpp::NumericVector mu1, bool use_log);
static SEXP _miceadds_miceadds_rcpp_ml_mcmc_probit_loglike_try(SEXP y_intSEXP, SEXP alphaSEXP, SEXP mu1SEXP, SEXP use_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_int(y_intSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< bool >::type use_log(use_logSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_ml_mcmc_probit_loglike(y_int, alpha, mu1, use_log));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_ml_mcmc_probit_loglike(SEXP y_intSEXP, SEXP alphaSEXP, SEXP mu1SEXP, SEXP use_logSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_ml_mcmc_probit_loglike_try(y_intSEXP, alphaSEXP, mu1SEXP, use_logSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_rnorm_double
double miceadds_rcpp_rnorm_double(double mu, double sigma);
static SEXP _miceadds_miceadds_rcpp_rnorm_double_try(SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_rnorm_double(mu, sigma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_rnorm_double(SEXP muSEXP, SEXP sigmaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_rnorm_double_try(muSEXP, sigmaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_ml_mcmc_sample_thresholds
arma::colvec miceadds_rcpp_ml_mcmc_sample_thresholds(arma::mat X, arma::colvec beta, Rcpp::List Z_list, Rcpp::List u_list, Rcpp::List idcluster_list, int NR, int K, arma::colvec alpha, Rcpp::NumericVector sd_proposal, Rcpp::IntegerVector y_int);
static SEXP _miceadds_miceadds_rcpp_ml_mcmc_sample_thresholds_try(SEXP XSEXP, SEXP betaSEXP, SEXP Z_listSEXP, SEXP u_listSEXP, SEXP idcluster_listSEXP, SEXP NRSEXP, SEXP KSEXP, SEXP alphaSEXP, SEXP sd_proposalSEXP, SEXP y_intSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type u_list(u_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type idcluster_list(idcluster_listSEXP);
    Rcpp::traits::input_parameter< int >::type NR(NRSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sd_proposal(sd_proposalSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_int(y_intSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_ml_mcmc_sample_thresholds(X, beta, Z_list, u_list, idcluster_list, NR, K, alpha, sd_proposal, y_int));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _miceadds_miceadds_rcpp_ml_mcmc_sample_thresholds(SEXP XSEXP, SEXP betaSEXP, SEXP Z_listSEXP, SEXP u_listSEXP, SEXP idcluster_listSEXP, SEXP NRSEXP, SEXP KSEXP, SEXP alphaSEXP, SEXP sd_proposalSEXP, SEXP y_intSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_miceadds_miceadds_rcpp_ml_mcmc_sample_thresholds_try(XSEXP, betaSEXP, Z_listSEXP, u_listSEXP, idcluster_listSEXP, NRSEXP, KSEXP, alphaSEXP, sd_proposalSEXP, y_intSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// miceadds_rcpp_impute_pmm6
Rcpp::NumericVector miceadds_rcpp_impute_pmm6(Rcpp::NumericVector y, Rcpp::NumericVector ry01, Rcpp::NumericMatrix x, double ridge, Rcpp::NumericVector coefu1, Rcpp::NumericVector donorsample);
RcppExport SEXP _miceadds_miceadds_rcpp_impute_pmm6(SEXP ySEXP, SEXP ry01SEXP, SEXP xSEXP, SEXP ridgeSEXP, SEXP coefu1SEXP, SEXP donorsampleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ry01(ry01SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type ridge(ridgeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type coefu1(coefu1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type donorsample(donorsampleSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_impute_pmm6(y, ry01, x, ridge, coefu1, donorsample));
    return rcpp_result_gen;
END_RCPP
}
// scale2_C
Rcpp::NumericMatrix scale2_C(Rcpp::NumericMatrix x);
RcppExport SEXP _miceadds_scale2_C(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(scale2_C(x));
    return rcpp_result_gen;
END_RCPP
}
// scale2_NA_C
Rcpp::NumericMatrix scale2_NA_C(Rcpp::NumericMatrix x);
RcppExport SEXP _miceadds_scale2_NA_C(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(scale2_NA_C(x));
    return rcpp_result_gen;
END_RCPP
}
// miceadds_rcpp_weighted_sd
Rcpp::List miceadds_rcpp_weighted_sd(Rcpp::NumericMatrix x, Rcpp::NumericVector w, double eps);
RcppExport SEXP _miceadds_miceadds_rcpp_weighted_sd(SEXP xSEXP, SEXP wSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_weighted_sd(x, w, eps));
    return rcpp_result_gen;
END_RCPP
}
// miceadds_rcpp_weighted_cor
Rcpp::List miceadds_rcpp_weighted_cor(Rcpp::NumericMatrix x, Rcpp::NumericMatrix y, Rcpp::NumericVector wt, double eps);
RcppExport SEXP _miceadds_miceadds_rcpp_weighted_cor(SEXP xSEXP, SEXP ySEXP, SEXP wtSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_weighted_cor(x, y, wt, eps));
    return rcpp_result_gen;
END_RCPP
}
// miceadds_rcpp_sort_partial_index
Rcpp::IntegerVector miceadds_rcpp_sort_partial_index(Rcpp::NumericVector v, int n);
RcppExport SEXP _miceadds_miceadds_rcpp_sort_partial_index(SEXP vSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_sort_partial_index(v, n));
    return rcpp_result_gen;
END_RCPP
}
// miceadds_rcpp_weighted_pmm_match_case
int miceadds_rcpp_weighted_pmm_match_case(Rcpp::NumericVector ds, Rcpp::NumericVector weights_obs, int donors, Rcpp::IntegerVector donor_ind);
RcppExport SEXP _miceadds_miceadds_rcpp_weighted_pmm_match_case(SEXP dsSEXP, SEXP weights_obsSEXP, SEXP donorsSEXP, SEXP donor_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ds(dsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights_obs(weights_obsSEXP);
    Rcpp::traits::input_parameter< int >::type donors(donorsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type donor_ind(donor_indSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_weighted_pmm_match_case(ds, weights_obs, donors, donor_ind));
    return rcpp_result_gen;
END_RCPP
}
// miceadds_rcpp_weighted_pmm_match
Rcpp::NumericVector miceadds_rcpp_weighted_pmm_match(Rcpp::NumericVector yhatmis, Rcpp::NumericVector yhatobs, Rcpp::NumericVector yobs, Rcpp::NumericVector weights_obs, int donors);
RcppExport SEXP _miceadds_miceadds_rcpp_weighted_pmm_match(SEXP yhatmisSEXP, SEXP yhatobsSEXP, SEXP yobsSEXP, SEXP weights_obsSEXP, SEXP donorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type yhatmis(yhatmisSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type yhatobs(yhatobsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights_obs(weights_obsSEXP);
    Rcpp::traits::input_parameter< int >::type donors(donorsSEXP);
    rcpp_result_gen = Rcpp::wrap(miceadds_rcpp_weighted_pmm_match(yhatmis, yhatobs, yobs, weights_obs, donors));
    return rcpp_result_gen;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int _miceadds_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("Rcpp::List(*miceadds_rcpp_ml_mcmc_sampler)(arma::colvec,arma::mat,arma::mat,Rcpp::List,Rcpp::List,arma::colvec,Rcpp::List,double,arma::colvec,Rcpp::List,Rcpp::List,Rcpp::List,Rcpp::List,int,double,Rcpp::List,Rcpp::List,int,bool,bool,Rcpp::List,Rcpp::List,int,int,Rcpp::IntegerVector,bool,int,bool,int,Rcpp::NumericVector,double)");
        signatures.insert("arma::mat(*miceadds_rcpp_arma_chol_ridge)(arma::mat,double)");
        signatures.insert("arma::colvec(*miceadds_rcpp_mvrnorm)(arma::colvec,arma::mat,double)");
        signatures.insert("arma::mat(*miceadds_rcpp_rwishart)(int,arma::mat,double)");
        signatures.insert("arma::mat(*miceadds_rcpp_riwishart)(int,arma::mat,double)");
        signatures.insert("double(*miceadds_rcpp_rtnorm_double)(double,double,double,double)");
        signatures.insert("arma::colvec(*miceadds_rcpp_rtnorm)(arma::colvec,arma::colvec,arma::colvec,arma::colvec)");
        signatures.insert("Rcpp::NumericVector(*miceadds_rcpp_arma2vec)(arma::colvec)");
        signatures.insert("Rcpp::NumericVector(*miceadds_rcpp_pnorm)(Rcpp::NumericVector,Rcpp::NumericVector,double)");
        signatures.insert("Rcpp::NumericVector(*miceadds_rcpp_qnorm)(Rcpp::NumericVector,Rcpp::NumericVector,double)");
        signatures.insert("arma::colvec(*miceadds_rcpp_rtnorm2)(arma::colvec,double,arma::colvec,arma::colvec,double,double)");
        signatures.insert("arma::mat(*miceadds_rcpp_ml_mcmc_compute_xtx)(arma::mat)");
        signatures.insert("arma::mat(*miceadds_rcpp_ml_mcmc_compute_ztz)(arma::mat,Rcpp::IntegerVector,int)");
        signatures.insert("arma::colvec(*miceadds_rcpp_ml_mcmc_predict_fixed)(arma::mat,arma::colvec)");
        signatures.insert("arma::colvec(*miceadds_rcpp_ml_mcmc_subtract_fixed)(arma::colvec,arma::mat,arma::colvec)");
        signatures.insert("arma::colvec(*miceadds_rcpp_ml_mcmc_predict_random)(arma::mat,arma::mat,Rcpp::IntegerVector)");
        signatures.insert("arma::colvec(*miceadds_rcpp_ml_mcmc_predict_random_list)(Rcpp::List,Rcpp::List,Rcpp::List,int,int)");
        signatures.insert("arma::colvec(*miceadds_rcpp_ml_mcmc_predict_fixed_random)(arma::mat,arma::colvec,Rcpp::List,Rcpp::List,Rcpp::List,int)");
        signatures.insert("arma::colvec(*miceadds_rcpp_ml_mcmc_subtract_random)(arma::colvec,arma::mat,arma::mat,Rcpp::IntegerVector,bool)");
        signatures.insert("arma::colvec(*miceadds_rcpp_ml_mcmc_sample_beta)(arma::mat,arma::mat,Rcpp::List,arma::colvec,Rcpp::List,Rcpp::List,double,Rcpp::List,int,double)");
        signatures.insert("Rcpp::List(*miceadds_rcpp_ml_mcmc_sample_u)(arma::mat,arma::colvec,Rcpp::List,arma::colvec,Rcpp::List,Rcpp::List,Rcpp::List,double,Rcpp::List,Rcpp::List,int,Rcpp::List,double)");
        signatures.insert("arma::mat(*miceadds_rcpp_crossprod_one_matrix)(arma::mat)");
        signatures.insert("arma::mat(*miceadds_rcpp_ml_mcmc_sample_covariance_matrix)(arma::mat,int,arma::mat,double)");
        signatures.insert("void(*miceadds_rcpp_print_arma_mat)(arma::mat,int,int,int,int,int)");
        signatures.insert("Rcpp::List(*miceadds_rcpp_ml_mcmc_sample_psi)(Rcpp::List,Rcpp::List,Rcpp::List,int,double)");
        signatures.insert("double(*miceadds_rcpp_ml_mcmc_sample_variance)(arma::colvec,int,double,double)");
        signatures.insert("double(*miceadds_rcpp_ml_mcmc_sample_sigma2)(arma::colvec,arma::mat,arma::colvec,Rcpp::List,Rcpp::List,Rcpp::List,Rcpp::List,int,double,int,double)");
        signatures.insert("arma::colvec(*miceadds_rcpp_ml_mcmc_sample_latent_probit)(arma::mat,arma::colvec,Rcpp::List,Rcpp::List,Rcpp::List,int,Rcpp::IntegerVector,arma::colvec,double,double)");
        signatures.insert("Rcpp::NumericVector(*miceadds_rcpp_ml_mcmc_probit_fill_index_lower)(Rcpp::IntegerVector,arma::colvec)");
        signatures.insert("Rcpp::NumericVector(*miceadds_rcpp_ml_mcmc_probit_fill_index_upper)(Rcpp::IntegerVector,arma::colvec)");
        signatures.insert("Rcpp::NumericVector(*miceadds_rcpp_ml_mcmc_probit_category_prob)(Rcpp::IntegerVector,arma::colvec,Rcpp::NumericVector,bool)");
        signatures.insert("double(*miceadds_rcpp_ml_mcmc_probit_loglike)(Rcpp::IntegerVector,arma::colvec,Rcpp::NumericVector,bool)");
        signatures.insert("double(*miceadds_rcpp_rnorm_double)(double,double)");
        signatures.insert("arma::colvec(*miceadds_rcpp_ml_mcmc_sample_thresholds)(arma::mat,arma::colvec,Rcpp::List,Rcpp::List,Rcpp::List,int,int,arma::colvec,Rcpp::NumericVector,Rcpp::IntegerVector)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _miceadds_RcppExport_registerCCallable() { 
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_ml_mcmc_sampler", (DL_FUNC)_miceadds_miceadds_rcpp_ml_mcmc_sampler_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_arma_chol_ridge", (DL_FUNC)_miceadds_miceadds_rcpp_arma_chol_ridge_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_mvrnorm", (DL_FUNC)_miceadds_miceadds_rcpp_mvrnorm_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_rwishart", (DL_FUNC)_miceadds_miceadds_rcpp_rwishart_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_riwishart", (DL_FUNC)_miceadds_miceadds_rcpp_riwishart_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_rtnorm_double", (DL_FUNC)_miceadds_miceadds_rcpp_rtnorm_double_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_rtnorm", (DL_FUNC)_miceadds_miceadds_rcpp_rtnorm_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_arma2vec", (DL_FUNC)_miceadds_miceadds_rcpp_arma2vec_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_pnorm", (DL_FUNC)_miceadds_miceadds_rcpp_pnorm_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_qnorm", (DL_FUNC)_miceadds_miceadds_rcpp_qnorm_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_rtnorm2", (DL_FUNC)_miceadds_miceadds_rcpp_rtnorm2_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_ml_mcmc_compute_xtx", (DL_FUNC)_miceadds_miceadds_rcpp_ml_mcmc_compute_xtx_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_ml_mcmc_compute_ztz", (DL_FUNC)_miceadds_miceadds_rcpp_ml_mcmc_compute_ztz_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_ml_mcmc_predict_fixed", (DL_FUNC)_miceadds_miceadds_rcpp_ml_mcmc_predict_fixed_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_ml_mcmc_subtract_fixed", (DL_FUNC)_miceadds_miceadds_rcpp_ml_mcmc_subtract_fixed_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_ml_mcmc_predict_random", (DL_FUNC)_miceadds_miceadds_rcpp_ml_mcmc_predict_random_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_ml_mcmc_predict_random_list", (DL_FUNC)_miceadds_miceadds_rcpp_ml_mcmc_predict_random_list_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_ml_mcmc_predict_fixed_random", (DL_FUNC)_miceadds_miceadds_rcpp_ml_mcmc_predict_fixed_random_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_ml_mcmc_subtract_random", (DL_FUNC)_miceadds_miceadds_rcpp_ml_mcmc_subtract_random_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_ml_mcmc_sample_beta", (DL_FUNC)_miceadds_miceadds_rcpp_ml_mcmc_sample_beta_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_ml_mcmc_sample_u", (DL_FUNC)_miceadds_miceadds_rcpp_ml_mcmc_sample_u_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_crossprod_one_matrix", (DL_FUNC)_miceadds_miceadds_rcpp_crossprod_one_matrix_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_ml_mcmc_sample_covariance_matrix", (DL_FUNC)_miceadds_miceadds_rcpp_ml_mcmc_sample_covariance_matrix_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_print_arma_mat", (DL_FUNC)_miceadds_miceadds_rcpp_print_arma_mat_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_ml_mcmc_sample_psi", (DL_FUNC)_miceadds_miceadds_rcpp_ml_mcmc_sample_psi_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_ml_mcmc_sample_variance", (DL_FUNC)_miceadds_miceadds_rcpp_ml_mcmc_sample_variance_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_ml_mcmc_sample_sigma2", (DL_FUNC)_miceadds_miceadds_rcpp_ml_mcmc_sample_sigma2_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_ml_mcmc_sample_latent_probit", (DL_FUNC)_miceadds_miceadds_rcpp_ml_mcmc_sample_latent_probit_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_ml_mcmc_probit_fill_index_lower", (DL_FUNC)_miceadds_miceadds_rcpp_ml_mcmc_probit_fill_index_lower_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_ml_mcmc_probit_fill_index_upper", (DL_FUNC)_miceadds_miceadds_rcpp_ml_mcmc_probit_fill_index_upper_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_ml_mcmc_probit_category_prob", (DL_FUNC)_miceadds_miceadds_rcpp_ml_mcmc_probit_category_prob_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_ml_mcmc_probit_loglike", (DL_FUNC)_miceadds_miceadds_rcpp_ml_mcmc_probit_loglike_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_rnorm_double", (DL_FUNC)_miceadds_miceadds_rcpp_rnorm_double_try);
    R_RegisterCCallable("miceadds", "_miceadds_miceadds_rcpp_ml_mcmc_sample_thresholds", (DL_FUNC)_miceadds_miceadds_rcpp_ml_mcmc_sample_thresholds_try);
    R_RegisterCCallable("miceadds", "_miceadds_RcppExport_validate", (DL_FUNC)_miceadds_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_miceadds_miceadds_rcpp_create_interactions", (DL_FUNC) &_miceadds_miceadds_rcpp_create_interactions, 8},
    {"_miceadds_kernelplsaux", (DL_FUNC) &_miceadds_kernelplsaux, 3},
    {"_miceadds_kernelpls_1dim_C", (DL_FUNC) &_miceadds_kernelpls_1dim_C, 3},
    {"_miceadds_miceadds_rcpp_ml_mcmc_sampler", (DL_FUNC) &_miceadds_miceadds_rcpp_ml_mcmc_sampler, 31},
    {"_miceadds_miceadds_rcpp_arma_chol_ridge", (DL_FUNC) &_miceadds_miceadds_rcpp_arma_chol_ridge, 2},
    {"_miceadds_miceadds_rcpp_mvrnorm", (DL_FUNC) &_miceadds_miceadds_rcpp_mvrnorm, 3},
    {"_miceadds_miceadds_rcpp_rwishart", (DL_FUNC) &_miceadds_miceadds_rcpp_rwishart, 3},
    {"_miceadds_miceadds_rcpp_riwishart", (DL_FUNC) &_miceadds_miceadds_rcpp_riwishart, 3},
    {"_miceadds_miceadds_rcpp_rtnorm_double", (DL_FUNC) &_miceadds_miceadds_rcpp_rtnorm_double, 4},
    {"_miceadds_miceadds_rcpp_rtnorm", (DL_FUNC) &_miceadds_miceadds_rcpp_rtnorm, 4},
    {"_miceadds_miceadds_rcpp_arma2vec", (DL_FUNC) &_miceadds_miceadds_rcpp_arma2vec, 1},
    {"_miceadds_miceadds_rcpp_pnorm", (DL_FUNC) &_miceadds_miceadds_rcpp_pnorm, 3},
    {"_miceadds_miceadds_rcpp_qnorm", (DL_FUNC) &_miceadds_miceadds_rcpp_qnorm, 3},
    {"_miceadds_miceadds_rcpp_rtnorm2", (DL_FUNC) &_miceadds_miceadds_rcpp_rtnorm2, 6},
    {"_miceadds_miceadds_rcpp_ml_mcmc_compute_xtx", (DL_FUNC) &_miceadds_miceadds_rcpp_ml_mcmc_compute_xtx, 1},
    {"_miceadds_miceadds_rcpp_ml_mcmc_compute_ztz", (DL_FUNC) &_miceadds_miceadds_rcpp_ml_mcmc_compute_ztz, 3},
    {"_miceadds_miceadds_rcpp_ml_mcmc_predict_fixed", (DL_FUNC) &_miceadds_miceadds_rcpp_ml_mcmc_predict_fixed, 2},
    {"_miceadds_miceadds_rcpp_ml_mcmc_subtract_fixed", (DL_FUNC) &_miceadds_miceadds_rcpp_ml_mcmc_subtract_fixed, 3},
    {"_miceadds_miceadds_rcpp_ml_mcmc_predict_random", (DL_FUNC) &_miceadds_miceadds_rcpp_ml_mcmc_predict_random, 3},
    {"_miceadds_miceadds_rcpp_ml_mcmc_predict_random_list", (DL_FUNC) &_miceadds_miceadds_rcpp_ml_mcmc_predict_random_list, 5},
    {"_miceadds_miceadds_rcpp_ml_mcmc_predict_fixed_random", (DL_FUNC) &_miceadds_miceadds_rcpp_ml_mcmc_predict_fixed_random, 6},
    {"_miceadds_miceadds_rcpp_ml_mcmc_subtract_random", (DL_FUNC) &_miceadds_miceadds_rcpp_ml_mcmc_subtract_random, 5},
    {"_miceadds_miceadds_rcpp_ml_mcmc_sample_beta", (DL_FUNC) &_miceadds_miceadds_rcpp_ml_mcmc_sample_beta, 10},
    {"_miceadds_miceadds_rcpp_ml_mcmc_sample_u", (DL_FUNC) &_miceadds_miceadds_rcpp_ml_mcmc_sample_u, 13},
    {"_miceadds_miceadds_rcpp_crossprod_one_matrix", (DL_FUNC) &_miceadds_miceadds_rcpp_crossprod_one_matrix, 1},
    {"_miceadds_miceadds_rcpp_ml_mcmc_sample_covariance_matrix", (DL_FUNC) &_miceadds_miceadds_rcpp_ml_mcmc_sample_covariance_matrix, 4},
    {"_miceadds_miceadds_rcpp_print_arma_mat", (DL_FUNC) &_miceadds_miceadds_rcpp_print_arma_mat, 6},
    {"_miceadds_miceadds_rcpp_ml_mcmc_sample_psi", (DL_FUNC) &_miceadds_miceadds_rcpp_ml_mcmc_sample_psi, 5},
    {"_miceadds_miceadds_rcpp_ml_mcmc_sample_variance", (DL_FUNC) &_miceadds_miceadds_rcpp_ml_mcmc_sample_variance, 4},
    {"_miceadds_miceadds_rcpp_ml_mcmc_sample_sigma2", (DL_FUNC) &_miceadds_miceadds_rcpp_ml_mcmc_sample_sigma2, 11},
    {"_miceadds_miceadds_rcpp_ml_mcmc_sample_latent_probit", (DL_FUNC) &_miceadds_miceadds_rcpp_ml_mcmc_sample_latent_probit, 10},
    {"_miceadds_miceadds_rcpp_ml_mcmc_probit_fill_index_lower", (DL_FUNC) &_miceadds_miceadds_rcpp_ml_mcmc_probit_fill_index_lower, 2},
    {"_miceadds_miceadds_rcpp_ml_mcmc_probit_fill_index_upper", (DL_FUNC) &_miceadds_miceadds_rcpp_ml_mcmc_probit_fill_index_upper, 2},
    {"_miceadds_miceadds_rcpp_ml_mcmc_probit_category_prob", (DL_FUNC) &_miceadds_miceadds_rcpp_ml_mcmc_probit_category_prob, 4},
    {"_miceadds_miceadds_rcpp_ml_mcmc_probit_loglike", (DL_FUNC) &_miceadds_miceadds_rcpp_ml_mcmc_probit_loglike, 4},
    {"_miceadds_miceadds_rcpp_rnorm_double", (DL_FUNC) &_miceadds_miceadds_rcpp_rnorm_double, 2},
    {"_miceadds_miceadds_rcpp_ml_mcmc_sample_thresholds", (DL_FUNC) &_miceadds_miceadds_rcpp_ml_mcmc_sample_thresholds, 10},
    {"_miceadds_miceadds_rcpp_impute_pmm6", (DL_FUNC) &_miceadds_miceadds_rcpp_impute_pmm6, 6},
    {"_miceadds_scale2_C", (DL_FUNC) &_miceadds_scale2_C, 1},
    {"_miceadds_scale2_NA_C", (DL_FUNC) &_miceadds_scale2_NA_C, 1},
    {"_miceadds_miceadds_rcpp_weighted_sd", (DL_FUNC) &_miceadds_miceadds_rcpp_weighted_sd, 3},
    {"_miceadds_miceadds_rcpp_weighted_cor", (DL_FUNC) &_miceadds_miceadds_rcpp_weighted_cor, 4},
    {"_miceadds_miceadds_rcpp_sort_partial_index", (DL_FUNC) &_miceadds_miceadds_rcpp_sort_partial_index, 2},
    {"_miceadds_miceadds_rcpp_weighted_pmm_match_case", (DL_FUNC) &_miceadds_miceadds_rcpp_weighted_pmm_match_case, 4},
    {"_miceadds_miceadds_rcpp_weighted_pmm_match", (DL_FUNC) &_miceadds_miceadds_rcpp_weighted_pmm_match, 5},
    {"_miceadds_RcppExport_registerCCallable", (DL_FUNC) &_miceadds_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_miceadds(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
